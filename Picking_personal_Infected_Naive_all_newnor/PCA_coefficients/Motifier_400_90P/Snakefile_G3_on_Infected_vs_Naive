import os.path
import os
import subprocess


def read_replicates(in_path):
    with open(in_path) as in_file:
        return [k.rstrip() for k in in_file]


EXPERIMENTS = {
    "Infected_vs_Naive": ("Infected", "Naive"),
}

CROSS_EXPERIMENTS = {
    "G3_E3_D28+D0_cross": ("Infected", "G3_D28_E3_Test", "G3_D0_E3_Test"),
}


rule all:
    input:
        [
            f"data/cross_model/02_confusing_matrix/{k}_on_{j}"
            for k, j in zip(CROSS_EXPERIMENTS.keys(), EXPERIMENTS.keys())
        ],


rule assign_peptides_to_motifs:
    input:
        motifs="data/clusters/13_top_merged_meme/{group}.txt",
        cutoffs="data/clusters/14_cutoffs/{group}.txt",
        peptides="input_G3/peptides/{replicate}.faa",
    output:
        "data/model/00_hits/{replicate}_peptides_vs_{group}_motifs.txt",
    log:
        "logs/PSSM_score_Peptide/hits/{replicate}_peptides_vs_{group}_motifs.log",
    benchmark:
        "benchmark/PSSM_score_Peptide/hits/{replicate}_peptides_vs_{group}_motifs.txt"
    threads: workflow.cores
    shell:
        "pssm_score_peptide CalcPSSM_Hits "
        "--pssm {input.motifs} --pssm_cutoffs {input.cutoffs} --seq {input.peptides} "
        "--out {output} > {log}"


rule merge_hits_cross:
    input:
        lambda wc: expand(
            f"data/model/00_hits/{{replicate}}_peptides_vs_{CROSS_EXPERIMENTS[wc.label][0]}_motifs.txt",
            replicate=[
                *read_replicates(f"input_G3/groups/{CROSS_EXPERIMENTS[wc.label][1]}.txt"),
                *read_replicates(f"input_G3/groups/{CROSS_EXPERIMENTS[wc.label][2]}.txt"),
            ],
        ),
    output:
        "data/cross_model/00_merged_hits/{label}.csv",
    params:
        condition=lambda wc: " ".join(
            f"-c {k}"
            for k in read_replicates(
                f"input_G3/groups/{CROSS_EXPERIMENTS[wc.label][1]}.txt"
            )
        ),
        label=lambda wc: CROSS_EXPERIMENTS[wc.label][0],
    shell:
        "motifier legacy merge-hits {input} {params.condition} "
        "-l {params.label} > {output}"


rule perdiction:
    input:
        best_model="data/model/06_best_model/best_model_{model_label}",
        cross_hits="data/cross_model/00_merged_hits/{cross_label}.csv",
    output:
        directory("data/cross_model/01_prediction/{cross_label}_on_{model_label}"),
    shell:
        "predict {input.best_model} {input.cross_hits} {output}"


rule confusing_matrix:
    input:
        "data/cross_model/01_prediction/{cross_label}_on_{model_label}",
    output:
        directory("data/cross_model/02_confusing_matrix/{cross_label}_on_{model_label}"),
    run:
        os.mkdir(str(output))
        for file in os.listdir(str(input)):
            if file.startswith("Top"):
                subprocess.run(
                    [
                        "generate-confusing-matrix",
                        os.path.join(str(input), file),
                        os.path.join(str(output), os.path.splitext(file)[0]),
                    ]
                )
